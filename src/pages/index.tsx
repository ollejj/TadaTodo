import { Todo } from "../components/todo";
import { Button } from "../components/button";
import { mdiPlus } from "@mdi/js";
import useSWR from "swr";
import { PrismaClient } from "@prisma/client";
import type { InferGetServerSidePropsType, GetServerSideProps } from "next";
import Header from "../components/header";
import cn from "classnames";
import "../app/globals.css";
import { Inter } from "next/font/google";
import type { Metadata } from "next";

const inter = Inter({ subsets: ["latin"] });

const fetcher = (...args) => fetch(...args).then((res) => res.json());

const prisma = new PrismaClient();

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type ContentData = {
  label: string;
  dateAdded: string;
  dateEnd: string;
};

type ResponseData = {
  todos: Array<ContentData>;
};

export const getServerSideProps = (async (context) => {
  const todos = await prisma.todo.findMany();
  console.log("server", todos);
  return {
    props: {
      initialTodos: todos,
    },
  };
}) satisfies GetServerSideProps<ResponseData>;

const addTodo = async (todo) => {
  const response = await fetch("/api/todoHandler", {
    method: "POST",
    body: JSON.stringify(todo),
    headers: {
      "Content-Type": "application/json; charset=utf8",
    },
  });

  console.log("response", todo);

  if (!response.ok) {
    throw new Error(response.statusText);
  }

  return await response.json();
};

const deleteTodo = async (todo) => {
  if (window.confirm("Do you want to delete this todoo?")) {
    await fetch("/api/todoHandler", {
      method: "DELETE",
      body: JSON.stringify({
        id: todo.id,
      }),
      headers: {
        "Content-Type": "application/json; charset=utf8",
      },
    });
    console.log("response", todo);
  }
};

export default function Home({ initialTodos }) {
  const bodyStyle = cn("text-isabeline bg-eerie-black-400", inter.className);

  return (
    <div>
      <Header />
      <main className="w-screen p-4 flex flex-col lg:flex-row gap-6 text-isabeline">
        {initialTodos
          ?.sort((a, b) => new Date(a.dateEnd) - new Date(b.dateEnd))
          .map((e, i) => {
            return (
              <Todo key={e.id} {...e} handleDelete={() => deleteTodo(e)} />
            );
          })}

        <Button
          className="fixed bottom-0 left-0 right-0 h-12 justify-items-center"
          label="Add Todo"
          onClick={() =>
            addTodo({
              label: "test",
              dateAdded: "2023-06-05",
              dateEnd: "2023-10-10",
            })
          }
        />
      </main>
    </div>
  );
}
