import { Todo } from "../components/todo";
import { Button } from "../components/button";
import { Modal } from "../components/modal";
import { mdiPlus } from "@mdi/js";
import useSWR from "swr";
import { PrismaClient } from "@prisma/client";
import type { InferGetServerSidePropsType, GetServerSideProps } from "next";
import Header from "../components/header";
import cn from "classnames";
import "../app/globals.css";
import { Inter } from "next/font/google";
import type { Metadata } from "next";
import { useState, useRef } from "react";

const inter = Inter({ subsets: ["latin"] });

const fetcher = (...args) => fetch(...args).then((res) => res.json());

const prisma = new PrismaClient();

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type ContentData = {
  label: string;
  dateAdded: string;
  dateEnd: string;
};

type ResponseData = {
  todos: Array<ContentData>;
};

export const getServerSideProps = (async (context) => {
  const todos = await prisma.todo.findMany();
  console.log("server", todos);
  return {
    props: {
      initialTodos: todos,
    },
  };
}) satisfies GetServerSideProps<ResponseData>;

export default function Home({ initialTodos }) {
  const bodyStyle = cn("text-isabeline bg-eerie-black-400", inter.className);

  const [modalIsOpen, setModalIsOpen] = useState<boolean>(false);

  const descRef = useRef<HTMLInputElement>(null);
  const deadlineRef = useRef<HTMLInputElement>(null);

  const toggleModal = () => {
    setModalIsOpen(!modalIsOpen);
  };

  const addTodo = async (todo) => {
    const response = await fetch("/api/todoHandler", {
      method: "POST",
      body: JSON.stringify({
        label: descRef.current.value,
        dateEnd: deadlineRef.current.value,
        dateAdded: new Date().toISOString().substring(0, 10),
      }),
      headers: {
        "Content-Type": "application/json; charset=utf8",
      },
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    setModalIsOpen(false);

    return await response.json();
  };

  const deleteTodo = async (todo) => {
    if (window.confirm("Do you want to delete this todoo?")) {
      const response = await fetch("/api/todoHandler", {
        method: "DELETE",
        body: JSON.stringify({
          id: todo.id,
        }),
        headers: {
          "Content-Type": "application/json; charset=utf8",
        },
      });

      if (!response.ok) {
        throw new Error(response.statusText);
      }
    }
  };

  return (
    <div>
      <Header />
      <main className="w-screen p-4 mb-24 flex flex-col lg:flex-row gap-6 text-isabeline">
        {initialTodos
          ?.sort((a, b) => new Date(a.dateEnd) - new Date(b.dateEnd))
          .map((e, i) => {
            return (
              <Todo key={e.id} {...e} handleDelete={() => deleteTodo(e)} />
            );
          })}

        <Button
          className="fixed bottom-10 self-center w-12 h-12 justify-items-center bg-[#FC7785] rounded-lg shadow-xl shadow-[#FC7785]"
          leadingIcon={mdiPlus}
          onClick={toggleModal}
        />
        {modalIsOpen && (
          <Modal title="Add Todo" onCancel={toggleModal} onConfirm={addTodo}>
            <div className="flex flex-col gap-1">
              <label htmlFor="desc" className="text-eerie-black-50 text-sm">
                Description
              </label>
              <input
                ref={descRef}
                name="desc"
                className="w-full h-10 px-2 text-sm text-white rounded-md bg-eerie-black-100"
                type="text"
                placeholder="e.g., Buy milk and oatmeal"
              />
            </div>
            <div className="flex flex-col gap-1">
              <label htmlFor="schedule" className="text-eerie-black-50 text-sm">
                Schedule
              </label>
              <input
                ref={deadlineRef}
                name="schedule"
                className="w-full h-10 px-2 text-sm text-white rounded-md bg-eerie-black-100"
                type="date"
                defaultValue={new Date().toISOString().substring(0, 10)}
              />
            </div>
          </Modal>
        )}
      </main>
    </div>
  );
}
